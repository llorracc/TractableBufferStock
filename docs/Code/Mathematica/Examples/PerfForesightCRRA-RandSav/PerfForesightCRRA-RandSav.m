(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* This notebook solves and simulates the PerfForesightCRRA-RandSav model *)


(* This cell is basically housekeeping and setup stuff; it can be ignored *)
ClearAll["Global`*"];ParamsAreSet=False;
If[Length[$FrontEnd] > 0,NBDir=SetDirectory[NotebookDirectory[]]];(* If running from the Notebook interface *)
If[$VersionNumber<9,(*then*) Print["These programs require Mathematica version 9 or greater."];Abort[]];
(* If running from shell, must start from inside same directory in which notebook resides *)
AutoLoadDir=SetDirectory["../../CoreCode/Autoload"];Get["./init.m"];
CoreCodeDir=SetDirectory[".."];
rootDir = SetDirectory[".."];
Get[CoreCodeDir<>"/MakeAnalyticalResults.m"];
Get[CoreCodeDir<>"/VarsAndFuncs.m"];
(* Method of creating figures depends on whether being run in batch mode or interactively *)
If[$FrontEnd == Null,OpenFigsUsingShell=True,OpenFigsUsingShell=False]; 
TractableFigDir=SetDirectory[rootDir<>"/Examples/PerfForesightCRRA-RandSav/Figures/"];
TractableCodeDir=SetDirectory[rootDir<>"/Examples/PerfForesightCRRA-RandSav"];

(* For the definition of the saving rate, see handout PerfForesightCRRA *)
income[atm1_]:= atm1 ((R)-1)+1;
savRateBufferStock[atm1_]:=(income[atm1]-cE[atm1 (R)+1])/income[atm1];
(* For the derivation of this expression, see handout PerfForesightCRRA *)
savRatePF[atm1_]:=((((1/\[Rho])((r)-\[CurlyTheta]))-\[GothicG])/((r)-\[GothicG])+(1/\[Rho])((r)-\[CurlyTheta])atm1)/(1+(r)atm1);

Get[CoreCodeDir<>"/ParametersBase.m"];

{aMin,aMax}={0.,10};
{sMin,sMax}={-0.3,0.6};
r=0.08;\[CurlyTheta]=0.04;\[GothicG]=0.025;FindStableArm;
savRateAtInfty=((1/\[Rho])((r)-\[CurlyTheta]))/(r);
savRateInftyPlot=Plot[savRateAtInfty
,{atm1,aMin,aMax}
,PlotStyle->{Dashed[{0.02}]}];
savRatePF0=Plot[savRatePF[atm1]
,{atm1,aMin,aMax}
,PlotRange->{Automatic,{sMin,sMax}}
];
savRateBufferStock0=Plot[savRateBufferStock[atm1],{atm1,aMin,aMax}];
\[GothicG]=0.03;
FindStableArm;
savRatePF1=Plot[savRatePF[atm1],{atm1,aMin,aMax},PlotRange->{Automatic,{sMin,sMax}},PlotStyle->Red];
savRateBufferStock1=Plot[savRateBufferStock[atm1],{atm1,aMin,aMax}
,PlotStyle->Red
];
savRatePFCompare = Show[savRatePF0,savRatePF1,savRateInftyPlot
,Graphics[Text["\[LowerLeftArrow] \!\(\*SuperscriptBox[\(\[Rho]\), \(-1\)]\)(r-\[CurlyTheta])/r",{(aMax-aMin)/2,savRateAtInfty},{0,-1}]]
,Graphics[Text["\[LowerLeftArrow] \[Gamma]=0.025",{(aMax-aMin)(3/4),0.08+savRatePF[(aMax-aMin)(3/4)]},{0,-1}]]
,Graphics[Text["\[Gamma]=0.03 \[UpperRightArrow]",{(aMax-aMin)/2,savRatePF[(aMax-aMin)/2]},{0,1}]]
,AxesLabel->{"\!\(\*SubscriptBox[\(a\), \(t - 1\)]\)","\!\(\*SubscriptBox[OverscriptBox[\(s\), \(`\)], \(t\)]\)"}
,PlotRange->{Automatic,{sMin,sMax}}
,AxesOrigin->{0.,0.}
];

ExportFigsToDir["savRatePFCompare","./Figures"];
savRateBufferStockCompare=Show[savRateBufferStock0,savRateBufferStock1
,Graphics[Text["\[LowerLeftArrow] \[Gamma]=0.025",{(aMax-aMin)(3/4),0.08+savRateBufferStock[(aMax-aMin)(3/4)]},{0,-1}]]
,Graphics[Text["\[Gamma]=0.03 \[UpperRightArrow]",{(aMax-aMin)/2,-0.02+savRateBufferStock[(aMax-aMin)/2]},{0,1}]]
,AxesLabel->{"\!\(\*SubscriptBox[\(a\), \(t - 1\)]\)","\!\(\*SubscriptBox[OverscriptBox[\(s\), \(`\)], \(t\)]\)"}
,PlotRange->{Automatic,{sMin,sMax}}
,AxesOrigin->{0.,0.}];
ExportFigsToDir["savRateBufferStockCompare","./Figures"];



